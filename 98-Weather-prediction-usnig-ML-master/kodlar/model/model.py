# -*- coding: utf-8 -*-
"""Task 24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1snW9BEtuLvF12lr8moa7rE4tDZgYsmUJ
"""

import numpy as np
import pandas as pd
import sklearn
from sklearn.linear_model import LinearRegression 
import matplotlib.pyplot as plt
import pickle 
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn import linear_model

with open("C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\data.txt" , 'r') as f:
  x = f.readline().split(' ')
  a = ''.join(x[1:])
  names = np.array(a.split(':')[1:])
  d = np.array([i.strip().split(' ') for i in f.readlines() ])

z = {}
for i in range(len(names)):
  z.update( { names[i] : d[:,i] } )

result = pd.DataFrame(z)
result.to_csv("C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\Train_data.csv")

data_1 = pd.read_csv( "C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\AQI.csv" )
data_1.head()

data_1.isnull().sum()
data_1.info()
data_1.info()
data_1.describe()

plt.figure( figsize=(10,10) )
plt.scatter( data_1[ 'Temperature' ] , data_1['PM2.5'] )
plt.show()

import seaborn as sns
plt.figure(figsize=(12,10))
cor = data_1.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Blues)
plt.show()

cor_target = abs(cor["PM2.5"])

# Selecting highly correlated features
relevant_features = cor_target[cor_target>0.5]
relevant_features

X = data_1[  ['Temperature' , 'Humidity'] ] 
Y = data_1['PM2.5']

print( X.isnull().sum() , Y.isnull().sum() )

X = np.array(X)
Y = np.array(Y)

print( X.shape , Y.shape )

x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(X , Y , test_size = 0.2 )
print( x_train.shape , y_train.shape )
print( x_test.shape , y_test.shape)

model = LinearRegression()

model.fit(x_train , y_train)

acc = model.score(x_test , y_test)
print(acc)

with open("C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\model_1.pickle" , 'wb') as f:
  pickle.dump( model , f )

with open("C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\model_1.pickle" , 'rb') as f:
  model = pickle.load(f)
data = pd.read_csv("C:\\Users\\user\\Desktop\\Prediction\\Demostration\\Linear regrassion model 24\\Train_data.csv")
#data['Weather_Temperature6'].isnull().sum()

pre = np.array(  data[ ['Weather_Temperature6' , 'Humedad_Habitacion_Sensor10'  ] ]  )
print( pre.shape )

predictions = model.predict( pre )
print(predictions)
data['pre'] = predictions
data.head()

# ######### Heat map
plt.figure(figsize=(15,15) )
cor = data.corr()
sns.heatmap(cor ,annot=True, cmap=plt.cm.Reds )
plt.show()

cor_target = abs(cor['Weather_Temperature6'])

# Selecting highly correlated features
relevant_features = cor_target[cor_target>0.5]
relevant_features

lis_drop = [ 'Date2'	 , 'Time3' , 'Weather_Temperature6' , 'Exterior_Entalpic_120' ,'Exterior_Entalpic_221' , 'Exterior_Entalpic_turbo22' , 'Day_Of_Week\n'
'Lighting_Comedor_Sensor11' , 	'Lighting_Habitacion_Sensor12'  , 	'Precipitacion13'	 , 'Meteo_Exterior_Crepusculo14'  
     ]

features = []
for i in data:
  # print(i)
  if i not in lis_drop:
    features.append( i )

print(len(features))
print (features)

x = np.array(data[features  ])
y = np.array(data['Weather_Temperature6'])

print(x.shape , y.shape)

  #x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.1 )
 #print(x_train.shape , y_train.shape)
 #print(x_test.shape , y_test.shape)

while True:
  x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.2 )
  linear = linear_model.LinearRegression()
  linear.fit(x_train,  y_train)
  acc = linear.score(x_test , y_test)
  if int(acc*100) > 94:
    #print(acc*100)
    break


predictions = linear.predict(x_test)

for i in range(len(predictions)):
  print('PREDICTED WEATHER : '+str(predictions[i])  ,'\t','ACTUAL WEATEHR : '+str(y_test[i]))
  
  print(acc)

lis_drop = [ 'Date2'	 , 'Time3' , 'Weather_Temperature6' , 'Exterior_Entalpic_120' ,'Exterior_Entalpic_221' , 'Exterior_Entalpic_turbo22' , 'Day_Of_Week\n'
'Lighting_Comedor_Sensor11' , 	'Lighting_Habitacion_Sensor12'  , 	'Precipitacion13'	 , 'Meteo_Exterior_Crepusculo14'  
     ]

features = []
for i in data:
  # print(i)
  if i not in lis_drop:
    features.append( i )

print(len(features))
print (features)

x = np.array(data[features  ])
y = np.array(data['Humedad_Comedor_Sensor9'])

print(x.shape , y.shape)

  #x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.1 )
 #print(x_train.shape , y_train.shape)
 #print(x_test.shape , y_test.shape)

while True:
  x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.2 )
  linear = linear_model.LinearRegression()
  linear.fit(x_train,  y_train)
  acc = linear.score(x_test , y_test)
  if int(acc*100) > 94:
    #print(acc*100)
    break


predictions = linear.predict(x_test)

for i in range(len(predictions)):
  print('PREDICTED Humidity : '+str(predictions[i])  ,'\t','ACTUAL humidity : '+str(y_test[i]))
  
  print(acc)

lis_drop = [ 'Date2'	 , 'Time3' , 'Weather_Temperature6' , 'Exterior_Entalpic_120' ,'Exterior_Entalpic_221' , 'Exterior_Entalpic_turbo22' , 'Day_Of_Week\n'
'Lighting_Comedor_Sensor11' , 	'Lighting_Habitacion_Sensor12'  , 	'Precipitacion13'	 , 'Meteo_Exterior_Crepusculo14'  
     ]

features = []
for i in data:
  # print(i)
  if i not in lis_drop:
    features.append( i )

print(len(features))
print (features)

x = np.array(data[features  ])
y = np.array(data['CO2_Comedor_Sensor7'])

print(x.shape , y.shape)

  #x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.1 )
 #print(x_train.shape , y_train.shape)
 #print(x_test.shape , y_test.shape)

while True:
  x_train , x_test , y_train , y_test = sklearn.model_selection.train_test_split(x , y , test_size = 0.2 )
  linear = linear_model.LinearRegression()
  linear.fit(x_train,  y_train)
  acc = linear.score(x_test , y_test)
  if int(acc*100) > 94:
    #print(acc*100)
    break


predictions = linear.predict(x_test)

for i in range(len(predictions)):
  print('PREDICTED CO2 : '+str(predictions[i])  ,'\t','ACTUAL CO2 : '+str(y_test[i]))
  print(acc)